[{"/home/projects/chatapp/client/src/index.js":"1","/home/projects/chatapp/client/src/App.jsx":"2","/home/projects/chatapp/client/src/components/ContextProviders.jsx":"3","/home/projects/chatapp/client/src/useSocket.js":"4","/home/projects/chatapp/client/src/userContext.js":"5","/home/projects/chatapp/client/src/components/Home.jsx":"6","/home/projects/chatapp/client/src/components/Register.jsx":"7","/home/projects/chatapp/client/src/components/Login.jsx":"8","/home/projects/chatapp/client/src/components/Header.jsx":"9","/home/projects/chatapp/client/src/components/Profile.jsx":"10","/home/projects/chatapp/client/src/components/Notifications.jsx":"11","/home/projects/chatapp/client/src/useFetch.js":"12","/home/projects/chatapp/client/src/useToken.js":"13","/home/projects/chatapp/client/src/useUser.js":"14","/home/projects/chatapp/client/src/components/SearchUsers.jsx":"15","/home/projects/chatapp/client/src/useUsers.js":"16","/home/projects/chatapp/client/src/components/room/ChatRoom.jsx":"17","/home/projects/chatapp/client/src/components/room/Messages.jsx":"18","/home/projects/chatapp/client/src/components/room/RoomHeader.jsx":"19"},{"size":285,"mtime":1617376262664,"results":"20","hashOfConfig":"21"},{"size":4222,"mtime":1617488135289,"results":"22","hashOfConfig":"21"},{"size":289,"mtime":1617376262664,"results":"23","hashOfConfig":"21"},{"size":567,"mtime":1617496865029,"results":"24","hashOfConfig":"21"},{"size":1655,"mtime":1617376262664,"results":"25","hashOfConfig":"21"},{"size":1424,"mtime":1617376262664,"results":"26","hashOfConfig":"21"},{"size":8534,"mtime":1617376262664,"results":"27","hashOfConfig":"21"},{"size":4597,"mtime":1617382659553,"results":"28","hashOfConfig":"21"},{"size":2367,"mtime":1617492643823,"results":"29","hashOfConfig":"21"},{"size":868,"mtime":1617487262145,"results":"30","hashOfConfig":"21"},{"size":1111,"mtime":1617486986925,"results":"31","hashOfConfig":"21"},{"size":688,"mtime":1617376262664,"results":"32","hashOfConfig":"21"},{"size":698,"mtime":1617376262664,"results":"33","hashOfConfig":"21"},{"size":1472,"mtime":1617376262664,"results":"34","hashOfConfig":"21"},{"size":2393,"mtime":1617466684087,"results":"35","hashOfConfig":"21"},{"size":1497,"mtime":1617376262664,"results":"36","hashOfConfig":"21"},{"size":6748,"mtime":1617490248232,"results":"37","hashOfConfig":"21"},{"size":1146,"mtime":1617489693759,"results":"38","hashOfConfig":"21"},{"size":617,"mtime":1617489779576,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1mt9sj2",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/home/projects/chatapp/client/src/index.js",[],["82","83"],"/home/projects/chatapp/client/src/App.jsx",["84"],"// react imports\nimport { useEffect, useContext, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// components imports\nimport Home from \"./components/Home\";\nimport Register from \"./components/Register\";\nimport Login from \"./components/Login\";\nimport Header from \"./components/Header\";\nimport Profile from \"./components/Profile\";\nimport ChatRoom from \"./components/room/ChatRoom\";\n\n// custom hooks\nimport useSocket from \"./useSocket\";\nimport Notifications from \"./components/Notifications\";\n\n// contexts\nimport userContext from \"./userContext\";\n// import chatContext from \"./chatContext\";\n\n// App component\nfunction App() {\n  // TODO: remove all console logs before production\n\n  // notificatoins are messages sent earlier to this user and not marked seen || messages sent while user is outside sender's room\n  // notifications are fetched from server-side on socket creation and sent to 'notifications' event\n  const [notifications, setNotifications] = useState([]);\n\n  // **** contexts ****\n  const { user, isFetched: isFetchedUserContext } = useContext(userContext);\n\n  // **** custom hooks ****\n  const { socket, setSocket } = useSocket();\n\n  // **** methods ****\n  const notificationsOnLogin = (undeliveredMessages) => {\n    // emit to server to mark as delivered\n    socket?.emit(\"delivered\", undeliveredMessages);\n\n    // notifications must be pushed as an array\n    undeliveredMessages = Array.isArray(undeliveredMessages)\n      ? undeliveredMessages\n      : [undeliveredMessages];\n\n    // assign besides the notifications state not overwrite the old notifications\n    setNotifications([...notifications, ...undeliveredMessages]);\n  };\n  const pushNotification = (message) => {\n    console.log(\"I may push a notification now\");\n    if (user?.inRoomWith !== message.from.username) {\n      socket?.emit(\"delivered\", message);\n      console.log(\"I should push this message as a notification: \", message);\n      setNotifications([...notifications, message]);\n    }\n  };\n\n  // **** useEffects ****\n  // connect socket\n  useEffect(() => {\n    console.log(\"I will run each time user context updates\", user);\n    if (isFetchedUserContext && user) {\n      setSocket(user._id);\n      // console.log(\"setting a socket instance for \", user.username, user._id);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n  // disconnect socket on unmount\n  useEffect(() => {\n    if (socket) {\n      if (!user && isFetchedUserContext) {\n        socket.disconnect();\n        // console.log(\"disconnected... was this a logout?\");\n      }\n      return () => {\n        console.log(\"unmounted component\");\n        socket.disconnect();\n      };\n    }\n  }, [socket, user]);\n\n  // listen to socket events unspecific to chat rooms\n  useEffect(() => {\n    if (socket) {\n      socket.on(\"notifications on login\", notificationsOnLogin);\n      socket.on(\"notification\", pushNotification);\n      return () => {\n        socket.off(\"notifications on login\");\n        socket.off(\"notification\");\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  });\n\n  return (\n    <Router>\n      <div className=\"h-screen flex flex-col\">\n        {user?.inRoomWith ? null : <Header notifications={notifications} />}\n        <div className=\"flex-grow mt-10\">\n          <Switch>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n            <Route path=\"/register\">\n              <Register />\n            </Route>\n            <Route path=\"/notifications\">\n              <Notifications\n                socket={socket}\n                notifications={notifications}\n                setNotifications={setNotifications}\n              />\n            </Route>\n            <Route path=\"/profile\">\n              <Profile />\n            </Route>\n            <Route path=\"/room/:id\">\n              <ChatRoom\n                socket={socket}\n                notifications={notifications}\n                setNotifications={setNotifications}\n              />\n            </Route>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/home/projects/chatapp/client/src/components/ContextProviders.jsx",[],"/home/projects/chatapp/client/src/useSocket.js",[],"/home/projects/chatapp/client/src/userContext.js",[],"/home/projects/chatapp/client/src/components/Home.jsx",[],"/home/projects/chatapp/client/src/components/Register.jsx",["85"],"import { useContext, useEffect, useState } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport useFetch from \"../useFetch\";\nimport useToken from \"../useToken\";\nimport userContext from \"../userContext\";\n\nexport default function Register(props) {\n  // const { currentUser, setCurrentUser, setToken } = props;\n  const history = useHistory();\n\n  const { setResponse, error: serverError} = useFetch();\n  const { setToken } = useToken();\n  const {user, setUser} = useContext(userContext);\n\n  useEffect(() => {\n    // if current user exists, redirect to home page\n    if (user) history.push(\"/\");\n  }, [user, history]);\n\n  // form data states\n  const [fullname, setFullname] = useState(\"\");\n  const [fullnameErr, setFullnameErr] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [usernameErr, setUsernameErr] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [emailErr, setEmailErr] = useState(\"\");\n  const [pw, setPw] = useState(\"\");\n  const [pwErr, setPwErr] = useState(\"\");\n  const [cpw, setCpw] = useState(\"\");\n  const [cpwErr, setCpwErr] = useState(\"\");\n\n  const handleSubmit = async () => {\n    let formData = {\n      fullname,\n      username,\n      email,\n      password: pw,\n    };\n\n    let url = `/register`;\n\n    let headers = new Headers();\n    headers.set(\"Accept\", \"application/json\");\n    headers.set(\"Content-Type\", \"application/json\");\n\n    let options = {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(formData),\n    };\n\n    // useFetch's callback\n    const completeRegisteration = ({ ok, data }) => {\n      if (ok) {\n        const { token, user: userData } = data;\n        setToken(token);\n        setUser(userData);\n      } else {\n        const { errors } = data;\n        const formatedErrors = errors.map((err) => [err.param, err.msg]);\n        updateErrors(formatedErrors);\n      }\n    };\n\n    setResponse(url, options, completeRegisteration);\n  };\n\n  const updateErrors = (errors) => {\n    errors.forEach((error) => {\n      const [param, msg] = error;\n\n      switch (param) {\n        case \"fullname\":\n          setFullnameErr(msg);\n          break;\n        case \"username\":\n          setUsernameErr(msg);\n          break;\n        case \"email\":\n          setEmailErr(msg);\n          break;\n        case \"password\":\n          setPwErr(msg);\n          break;\n        default:\n          break;\n      }\n    });\n  };\n\n  const inputSyle =\n    \"px-2 py-1 text-sm rounded-sm border border-indigo-300 bg-indigo-50 hover:bg-indigo-100 focus:bg-indigo-100 focus:text-black focus:outline-none\";\n  return (\n    <div className=\"h-screen flex flex-col justify-center items-center\">\n      <h1 className=\"text-4xl mb-10\">Register</h1>\n      <form className=\"w-full\">\n        <div className=\"my-2 flex flex-col w-1/2 md:w-1/3 m-auto\">\n          <label htmlFor=\"fullname\">full name</label>\n          <input\n            className={inputSyle}\n            type=\"text\"\n            id=\"fullname\"\n            name=\"fullname\"\n            placeholder=\"Ex: John Snow\"\n            onChange={(e) => {\n              setFullname(e.target.value);\n              // if no errors set fullnameErr to \"\"\n              if (e.target.value.length < 2 || e.target.value.length > 50) {\n                setFullnameErr(\n                  \"fullname shoule be at least 2 characters and not exceed 50 characters\"\n                );\n              } else {\n                setFullnameErr(\"\");\n              }\n            }}\n            required\n          />\n          <span className=\"text-sm text-red-700\">{fullnameErr}</span>\n        </div>\n        <div className=\"my-2 flex flex-col w-1/2 md:w-1/3 m-auto\">\n          <label htmlFor=\"username\">username</label>\n          <input\n            className={inputSyle}\n            type=\"text\"\n            id=\"username\"\n            name=\"username\"\n            placeholder=\"Ex: johnsnow432\"\n            onChange={(e) => {\n              const { value } = e.target;\n\n              setUsername(value);\n\n              // if no errors set usernameErr to \"\"\n              if (\n                value.includes(\" \") ||\n                !/^(?=[a-z_\\d]*[a-z])[a-z_\\d]{2,20}$/.test(value)\n              ) {\n                setUsernameErr(\n                  \"username must be 2-20 characters long, and contains letters and numbers only\"\n                );\n              } else {\n                setUsernameErr(\"\");\n              }\n            }}\n            required\n          />\n          <span className=\"text-sm text-red-700\">{usernameErr}</span>\n        </div>\n        <div className=\"my-2 flex flex-col w-1/2 md:w-1/3 m-auto\">\n          <label htmlFor=\"email\">email</label>\n          <input\n            className={inputSyle}\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Ex: john499@example.com\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n\n              if (\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(\n                  e.target.value\n                )\n              ) {\n                setEmailErr(\"Email is not valid\");\n              } else {\n                setEmailErr(\"\");\n              }\n            }}\n            required\n          />\n          <span className=\"text-sm text-red-700\">{emailErr}</span>\n        </div>\n        <div className=\"my-2 flex flex-col w-1/2 md:w-1/3 m-auto\">\n          <label htmlFor=\"password\">password</label>\n          <input\n            className={inputSyle}\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            onChange={(e) => {\n              setPw(e.target.value);\n\n              if (e.target.value.length < 8) {\n                setPwErr(\"password should contains at least 8 characters\");\n              } else {\n                setPwErr(\"\");\n              }\n\n              // check if cpw existed then validate if true\n              if (cpw.length) {\n                if (e.target.value !== cpw) {\n                  setCpwErr(\"password doesn't match\");\n                } else {\n                  setCpwErr(\"\");\n                }\n              }\n            }}\n            autoComplete=\"new-password\"\n            required\n          />\n          <span className=\"text-sm text-red-700\">{pwErr}</span>\n        </div>\n        <div className=\"my-2 flex flex-col w-1/2 md:w-1/3 m-auto\">\n          <label htmlFor=\"cpassword\">confirm password</label>\n          <input\n            className={inputSyle}\n            type=\"password\"\n            id=\"cpassword\"\n            name=\"cpassword\"\n            onChange={(e) => {\n              setCpw(e.target.value);\n\n              if (e.target.value !== pw) {\n                setCpwErr(\"password doesn't match\");\n              } else {\n                setCpwErr(\"\");\n              }\n            }}\n            autoComplete=\"new-password\"\n            required\n          />\n          <span className=\"text-sm text-red-700\">{cpwErr}</span>\n        </div>\n        <div className=\"my-2 flex flex-col w-40 m-auto\">\n          <input\n            type=\"submit\"\n            value=\"Submit\"\n            className=\"p-2 rounded-sm border border-indigo-300 bg-indigo-50 hover:bg-indigo-100 disabled:bg-gray-100 disabled:text-gray-500\"\n            disabled={\n              !fullname ||\n              !username ||\n              !email ||\n              !pw ||\n              !cpw ||\n              fullnameErr ||\n              usernameErr ||\n              emailErr ||\n              pwErr ||\n              cpwErr\n                ? true\n                : false\n            }\n            onClick={async (e) => {\n              // form validation\n              e.preventDefault();\n\n              let isFullnameValid = !fullnameErr,\n                isUsernameValid = !usernameErr,\n                isEmailValid = !emailErr && email.length,\n                isPwValid = !pwErr && pw.length >= 8,\n                isConfirmed = !cpwErr;\n\n              let isValidationPassed =\n                isFullnameValid &&\n                isUsernameValid &&\n                isEmailValid &&\n                isPwValid &&\n                isConfirmed;\n\n              if (isValidationPassed) {\n                handleSubmit();\n              } else {\n                setCpw(\"something is wrong\")\n              }\n            }}\n          />\n        </div>\n        <p className=\"lowercase text-center\">\n          have an account?{\" \"}\n          <Link to=\"/login\" className=\"text-indigo-500 hover:text-indigo-900\">\n            login\n          </Link>\n        </p>\n      </form>\n    </div>\n  );\n}\n","/home/projects/chatapp/client/src/components/Login.jsx",[],"/home/projects/chatapp/client/src/components/Header.jsx",[],"/home/projects/chatapp/client/src/components/Profile.jsx",[],"/home/projects/chatapp/client/src/components/Notifications.jsx",[],"/home/projects/chatapp/client/src/useFetch.js",[],"/home/projects/chatapp/client/src/useToken.js",[],"/home/projects/chatapp/client/src/useUser.js",[],"/home/projects/chatapp/client/src/components/SearchUsers.jsx",[],"/home/projects/chatapp/client/src/useUsers.js",[],"/home/projects/chatapp/client/src/components/room/ChatRoom.jsx",["86","87"],"import { useContext, useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport useUser from \"../../useUser\";\nimport userContext from \"../../userContext\";\nimport useToken from \"../../useToken\";\nimport useFetch from \"../../useFetch\";\nimport Messages from \"./Messages\";\nimport RoomHeader from \"./RoomHeader\";\n\nexport default function ChatRoom({ socket, notifications, setNotifications }) {\n  // **** variables, hooks, contexts, etc ****\n  const { id } = useParams(); // get id from url parameters\n  const { user: participant, setUser: setParticipant } = useUser(id); // fetch participant's data by id\n  const { token } = useToken(); // get token from localStorage\n  const { setResponse } = useFetch(); // useFetch custom hook\n  const { user, isFetched: isFetchedUser, setUser } = useContext(userContext); // get user context object\n  const [chat, setChat] = useState([]); // array of messages\n  const [isFetchedChat, setIsFetchedChat] = useState(false);\n  const [message, setMessage] = useState(\"\"); // value of textarea\n\n  // **** methods ****\n  const fetchRoomChat = () => { // get chat of this room on every render\n    const url = `/api/chat`;\n    const headers = new Headers();\n    headers.set(\"Authentication\", token);\n    headers.set(\"participants\", JSON.stringify([user._id, participant._id]));\n    const options = {\n      method: \"GET\",\n      headers,\n    };\n\n    const callback = ({ ok, data }) => {\n      if (ok) {\n        const messages = Array.isArray(data.messages)\n          ? data.messages\n          : [data.messages];\n\n        setChat(messages);\n        setIsFetchedChat(true);\n        window.scroll(0, document.body.scrollHeight + 1000);\n      } else {\n        console.log(\"couldn't fetch room chat \", data);\n      }\n    };\n\n    setResponse(url, options, callback);\n  };\n  const sendMessage = () => {// method for emitting a message to server and adding the current version of the message temporarily to chat array until receing the 'sent' event\n    console.log(\"I'll send a message\");\n    // format the message\n    let newMessage = {\n      _id: uuidv4(), // temporary id to be used as a key to the rendered message element -- as soon as the reformated message comes from server it will no longer be existed\n      text: message,\n      from: user,\n      to: participant,\n      delivered: false,\n      seen: false,\n    };\n\n    console.log(\"sending a message...\", newMessage, chat);\n    setChat([...chat, newMessage]);\n    window.scroll(0, document.body.scrollHeight + 1000); // scroll down on each message\n\n    // send to server\n    socket?.emit(\"message\", newMessage); // server will save it as a Message model and send it back to update the chat context\n\n    // reset message state\n    setMessage(\"\");\n  };\n  const receiveMessage = (message) => {\n    // add to chat array\n    setChat([...chat, message]);\n  };\n  const updateParticipant = (participantId) => {\n    if (participant?._id === participantId) {\n      setParticipant(id)\n    }\n  }\n\n  // **** useEffect callbacks ****\n  useEffect(() => {\n    if (user && participant) {\n      fetchRoomChat();\n    }\n  }, [id, participant, user])\n  const history = useHistory();\n  useEffect(() => {\n    // if not authenticated push to login\n    if (!user && isFetchedUser) {\n      history.push(\"/login\");\n    }\n\n    // set inRoomWith prop\n    if (user && participant) {\n      user.inRoomWith = participant.username;\n      setUser(user);\n    }\n\n    // empty notifications of this room\n    let updatedNotifications = notifications?.filter(notif => {\n      // if notif is found in chat array, return false >> filter it\n      let result = true;\n      chat.forEach(msg => {\n        if (msg._id === notif._id) {\n          result = false;\n        }\n      })\n      return result;\n    })\n    setNotifications([...updatedNotifications]);\n\n    // send 'seen' event for unseen messages\n    if (socket && participant && chat.length > 0) {\n      let unseenMessages = chat.filter(\n        (msg) => msg.from.username === participant.username && !msg.seen\n      );\n      if (unseenMessages.length > 0) {\n        console.log(\"sending 'seen' event\");\n        socket.emit(\"seen\", unseenMessages);\n      }\n    }\n\n    // room socket listeners\n    if (socket && user && participant) {\n      socket.on(\"participant status\", updateParticipant);\n      socket.on(\"message\", receiveMessage);\n      socket.on(\"delivered\", fetchRoomChat);\n      socket.on(\"seen\", fetchRoomChat);\n    }\n\n    // scroll down on each message\n    window.scroll(0, document.body.scrollHeight + 1000);\n\n    // clean up\n    return () => {\n      // clear inRoomWith prop\n      if (user) {\n        // why cloning? to force re render in App component\n        // simply assigning new value to inRoomWith doesn't make React rerender all the components. Read context caveats.\n        const clonedUser = {...user};\n        clonedUser.inRoomWith = null;\n        setUser(clonedUser);\n      }\n\n      // cancel room socket listeners\n      if (socket) {\n        socket.off(\"participant status\");\n        socket.off(\"message\");\n        socket.off(\"delivered\");\n        socket.off(\"seen\");\n      }\n    }\n  }, [id, socket, user, participant, chat]);\n\n  // **** JSX ****\n  let absoluteCenterStyle = \"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\";\n  let textAreaStyle = \"h-full px-2 sm:px-4 flex-grow border border-gray-300 focus:border-gray-400 shadow-inner outline-none resize-none leading-9 rounded-full\";\n  let sendBtnStyle = \"w-20 bg-blue-600 hover:bg-blue-700 cursor-pointer text-white rounded-full\";\n  return (\n    <div className=\"w-full h-full bg-gray-100 relative flex flex-col\">\n      {/* TODO: add a header (participant's data and options) */}\n      <RoomHeader participant={participant} />\n\n      {/* messages */}\n      {isFetchedChat ? (\n        <Messages messages={chat} user={user} />\n      ) : (\n        <div className={absoluteCenterStyle}>loading...</div>\n      )}\n\n      {/* textarea */}\n      <div className=\"w-full h-10 fixed bottom-1 flex\">\n        <textarea\n          className={textAreaStyle}\n          placeholder=\"type a message\"\n          value={message}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              e.preventDefault();\n              console.log(\"key pressed: \", e.key);\n              sendMessage();\n            }\n          }}\n          onChange={(e) => {\n            setMessage(e.target.value);\n          }}\n        ></textarea>\n        <input\n          className={sendBtnStyle}\n          type=\"button\"\n          value=\"Send\"\n          onClick={() => {\n            if (message.length !== 0) {\n              sendMessage(message);\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","/home/projects/chatapp/client/src/components/room/Messages.jsx",[],"/home/projects/chatapp/client/src/components/room/RoomHeader.jsx",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":80,"column":6,"nodeType":"94","endLine":80,"endColumn":20,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":11,"column":31,"nodeType":"98","messageId":"99","endLine":11,"endColumn":42},{"ruleId":"92","severity":1,"message":"100","line":86,"column":6,"nodeType":"94","endLine":86,"endColumn":29,"suggestions":"101"},{"ruleId":"92","severity":1,"message":"102","line":154,"column":6,"nodeType":"94","endLine":154,"endColumn":43,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isFetchedUserContext'. Either include it or remove the dependency array.","ArrayExpression",["106"],"no-unused-vars","'serverError' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'fetchRoomChat'. Either include it or remove the dependency array.",["107"],"React Hook useEffect has missing dependencies: 'fetchRoomChat', 'history', 'isFetchedUser', 'notifications', 'receiveMessage', 'setNotifications', 'setUser', and 'updateParticipant'. Either include them or remove the dependency array. If 'setNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["108"],"no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [isFetchedUserContext, socket, user]",{"range":"115","text":"116"},"Update the dependencies array to be: [fetchRoomChat, id, participant, user]",{"range":"117","text":"118"},"Update the dependencies array to be: [id, socket, user, participant, chat, isFetchedUser, notifications, setNotifications, history, setUser, updateParticipant, receiveMessage, fetchRoomChat]",{"range":"119","text":"120"},[2718,2732],"[isFetchedUserContext, socket, user]",[3155,3178],"[fetchRoomChat, id, participant, user]",[5173,5210],"[id, socket, user, participant, chat, isFetchedUser, notifications, setNotifications, history, setUser, updateParticipant, receiveMessage, fetchRoomChat]"]